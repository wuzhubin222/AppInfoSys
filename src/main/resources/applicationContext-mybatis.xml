<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 通过context:component-scan标签，Spring会自动去cn.smbms.dao,cn.smbms.service包里进行扫描，一旦发现使用
	@Repository、@Service注解标注的类，让它注册Bean组件 -->
	<context:component-scan base-package="cn.appsys.dao,cn.appsys.service" />
	
	<!-- BEGIN=== 为业务层增加声明式事务管理的相关配置 ===BEGIN-->
	<!-- 1、配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 2、使用tx:advice去配置声明式事务增强，并设置事务的属性 -->
	<tx:advice transaction-manager="transactionManager" id="txTransManager">
		<tx:attributes>
			<!-- 以get打头的方法 -->
			<tx:method name="get*" propagation="SUPPORTS"/>
			<tx:method name="query*" propagation="SUPPORTS"/>
			<tx:method name="insert*" propagation="REQUIRED"/>  <!-- 新增的方法 -->
			<tx:method name="update*" propagation="REQUIRED"/> <!--  修改的方法 -->
			<tx:method name="del*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<!-- END=== 为业务层增加声明式事务管理的相关配置 ===END-->
	<!-- 定义一个切面 -->
	<aop:config>
		<!-- 定义一个切入点, 将声明式事务管理切入到指定的包、类中的方法里 -->
		<aop:pointcut expression="execution(* cn.appsys.service..*(..))" id="pointcut"/>
		<!-- 利用aop:advisor标签将声明式事务管理与切入点结合在一起， 将声明式事务管理切入到指定的包、类中的方法里 -->
		<aop:advisor advice-ref="txTransManager" pointcut-ref="pointcut"/>
	</aop:config>
	
	<!-- 引入数据库配置文件，即database.properties -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:database.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置数据源对象dataSource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- 创建SqlSessionFactoryBean对象 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 引入数据源对象 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 引入Mybatis的核心配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 引入Mybatis的SQL映射文件 -->
		<property name="mapperLocations">
			<list>
				<value>cn/appsys/dao/**/*.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 使用MapperScannerConfigurer去简化DAO层的配置
		实现两个目的：1、它会自动去创建DAO接口的实现类。 2、自动为DAO接口实现类注入SqlSessionFactoryBean对象。
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.appsys.dao"></property>
	</bean>
	
</beans>